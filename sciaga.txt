cd [ścieżka] -chodzi po katalogach
git init -inicjuje repozytorium w aktualnym katalogu
git remote add <nazwa> <ścieżka> -tworzenie zdalnego repozytorium
git remote <nazwa> przełączenie się do zdalnego repozytorium
git config --global user.name 'Hubert Kowalski'
git config --global user.email 'h_kowalski@op.pl'
ssh-keygen -generowanie klucza SSH
git clone /c/GIT_l -kopiuje pliki z repozytorium
git status --sprawdzanie co możnz dalej zrobić
git add . -monitorowanie plików
git commit -m "add cute octocat story" -commit z komentarzem
git log
git help <polecenie>
git branch <nazwa> -tworzenie nowego brancha
git checkout <nazwa> -przełązanie się na brancha
git checkout -b <nazwa> -jednoczesnie branch i checkout
git fetch <nazwa repozytorium> -ciągnięcie z repozytorium
git log --pretty=format:"%h %s" --graph -drzewko branchy


echo "# origin" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/johnyk2/origin.git
git push -u origin master



git init
    Inicjalizuje repozytorium GIT w danym katalogu
git add [nazwa_pliku]
    Dodaje zmiany we wskazanym pliku do commita
git add .
    Dodaje wszystkie zmienione pliki do commita
git add -p [nazwa_pliku]
    Udostępnia możliwość dodania wybranych linii w zmodyfikowanym pliku do commita
git commit -m "[treść_commita]"
    Dodaje opis do commita. Dobrym zwyczajem jest opisanie co ta zmiana wprowadza do kodu w zakresie funkcjonalnym
git add origin [adres_repozytorium, np. https://github.com/username/moje-repozytorium.git]
    Ustawia konkretny adres zdalnego repozytorium jako główne repozytorium
git push origin master
    Wysłanie zmian do branacha zdalnego
git push -f
    Wysłanie zmian do zdalnego repozytorium ignorując konflikty, to znaczy, że jeśli wystapią konflikty to pliki zostaną nadpisane właśnie wysłaną wersją. Trzeba stosować to bardzo ostrożnie.
git checkout [nazwa_brancha]
    Zmienia aktywny branch na wybrany przez użytkownika
git checkout [nazwa_pliku]
    Usuwa zmiany w wybranym pliku
git checkout .
    Usuwa zmiany we wszystkich zmienionych plikach
git checkout -b [nazwa_brancha]
    Tworzenie nowego brancha z aktywnego brancha i przełączenie się na niego
git rebase master
    Zaciągnięcie zmian z brancha głównego do brancha aktywnego
git push origin :[nazwa_brancha]
    Usunięcie zdalnego brancha
git branch -d [nazwa_brancha]
    Usuwanie brancha lokalnie. Nie można usunąć w ten sposób aktywnego brancha
git stash
    Dodanie zmienonych plików do pamięci/stosu i usunięcie ich z aktywnego brancha
git pull --rebase
    Pobranie najnowszych zmian z aktywnego brancha zdalnego
git stash pop
    Przywrócenie zmodyfikowanych plików z pamięci/stosu
git stash clear
    Czyszczenie pamięci/stosu
git remote prune origin
    Pobranie aktualizacji o usuniętych branchach zdalnych
git fetch --all
    Pobranie listy zdalnych branchy
git branch
    Wyświetlenie listy lokalnych branchy
git branch -r
    Wyświetlenie listy zdalnych branchy
git status
    Wyświetlenie listy zmienionych plików
git diff [nazwa_pliku]
    Szczegółowe wyświetlenie zmian w wybranym pliku
git reset HEAD
    Resetowanie przygotowanych commitów (przed wysłaniem). Zmodyfikowane pliki są dostępne do ponownego dodania.
git reset HEAD --hard
    usuwanie wszystkich zmian z brancha lokalnego i przywrócenie zmian z brancha zdalnego
git reset HEAD^ --hard
    Usuwanie ostatniego commita z brancha
git reset HEAD^^
git reset HEAD~2
    Obydwie komendy usuwają ostatnie 2 zmiany z brancha. Im więcej daszków (^) tym więcej commitów zostanie usuniętych.
git rebase -i HEAD~3
    Interaktywne zmienianie zawartości, opisów commitów. Commity mozna łączyć wtedy w jeden duży, zmienić jego opis, itd.

Powyższe polecenia stosujemy w terminalu lub wierszu poleceń. Nie oznacza to jednak, że jesteśmy zmuszeni korzystać z GITa w sposób tekstowy. Istnieją różne nakładki graficzne na interfejs GITa, dzięki czemu korzystanie z niego jest przyjemniejsze. Dla systemów Windows istnieją aplikacje: GIT GUI lub aplikacja z GitHuba.

Powyższa lista komend na pewno nie wyczerpuje listy dostępnych komend, ale pozwala w zadowalający sposób pracować z tym system repozytoriów. Jeśli znasz jeszcze inne ciekawe komendy, które można wykorzystać w codziennej pracy, to zapraszam do dzielenia się nimi w sekcji komentarzy.
19/05/2013
Webmastering
2
[GIT] Podręczny zestaw niezbędnych komend dla każdego webdevelopera i nie tylko
O autorze
[GIT] Podręczny zestaw niezbędnych komend dla każdego webdevelopera i nie tylko
Piotr Nalepa
